name: Build FFmpegKit AAR and Integrate into Android Project

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build_ffmpeg_aar:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout FFmpegKit Repository
        uses: actions/checkout@v3
        with:
          repository: arthenica/ffmpeg-kit
          path: ffmpeg-kit
          token: ${{ secrets.GITHUB_TOKEN }} # Uses default GITHUB_TOKEN for cloning

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            autoconf automake libtool pkg-config curl git doxygen nasm cmake gcc gperf texinfo yasm bison autogen wget autopoint meson ninja-build ragel groff gtk-doc-tools libtasn1-dev gettext

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Set up Android SDK
        uses: android-actions/setup-android@v3
        with:
          cmdline-tools-version: '10406996' # Specify a recent stable version

      - name: Install Android NDK
        uses: android-actions/setup-android@v3
        with:
          ndk-version: '21.4.7075529' # Ensure this matches your project's NDK version if specific

      - name: Set ANDROID_NDK_HOME environment variable
        run: echo "ANDROID_NDK_HOME=$ANDROID_SDK_ROOT/ndk/21.4.7075529" >> $GITHUB_ENV
        # Ensure ANDROID_SDK_ROOT is correctly set by setup-android action

      - name: Build FFmpegKit AAR
        run: |
          cd ffmpeg-kit
          chmod +x android.sh
          # Using the --architectures flag, which is the standard for recent FFmpegKit versions.
          # If this still fails with "Unknown option --architectures",
          # you will need to check the exact help output of your android.sh script version.
          ./android.sh --lts --enable-gpl --full --debug --architectures arm-v7a,arm64-v8a,x86,x86-64 --disable-fribidi > ../build.log 2>&1 || (cat ../build.log && exit 1)
        env:
          # Pass these explicitly to the build script if it needs them, though setup-android usually handles it.
          ANDROID_SDK_ROOT: ${{ env.ANDROID_SDK_ROOT }}
          ANDROID_NDK_HOME: ${{ env.ANDROID_NDK_HOME }}

      - name: Upload FFmpegKit AAR as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ffmpeg-kit.aar
          path: ffmpeg-kit/prebuilt/bundle-android-aar/ffmpeg-kit.aar
          retention-days: 7 # Keep artifact for 7 days

      - name: Upload Build Logs on Failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: build-log-on-failure
          path: build.log
          retention-days: 3 # Keep failure logs for 3 days

  ---

  integrate_aar_into_android_project:
    needs: build_ffmpeg_aar # This job runs only after build_ffmpeg_aar completes successfully
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Android Project
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Set up Android SDK
        uses: android-actions/setup-android@v3
        with:
          cmdline-tools-version: '10406996'

      - name: Download FFmpegKit AAR
        uses: actions/download-artifact@v4
        with:
          name: ffmpeg-kit.aar
          path: . # Downloads to the root of the current workspace

      - name: Integrate FFmpegKit AAR into Android Project
        run: |
          mkdir -p app/libs
          cp ffmpeg-kit.aar app/libs/
          echo "Listing contents of app/libs:"
          ls -l app/libs/
          echo "Running Gradle build..."
          ./gradlew build # Or ./gradlew assembleDebug/Release for specific builds
